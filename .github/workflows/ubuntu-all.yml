name: Ubuntu-{16-18-20}.04

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    strategy:
      matrix:
        include:
          # Ubuntu 16.04
          - name: "Ubuntu 16.04"
            os: ubuntu-16.04
            extradeps: qttools5-dev-tools # Ubuntu 16.04 requires additional dependencies
          # Ubuntu 18.04
          - name: "Ubuntu 18.04"
            os: ubuntu-18.04
            extradeps: nano # Dummy extra dependency, something small, we don't actually need, but we can't have the field blank
          # Ubuntu 20.04
          - name: "Ubuntu 20.04"
            os: ubuntu-20.04
            extradeps: nano # Dummy extra dependency, something small, we don't actually need, but we can't have the field blank
      fail-fast: false

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Dependencies  # @TODO should also test qt6, but it's not present yet
      run: |
       sudo apt-get update
       sudo apt-get install -y xvfb libpcre++-dev qttools5-dev qtbase5-dev libarchive-dev ${{ matrix.extradeps }}
      
      # https://software.intel.com/content/www/us/en/develop/articles/installing-intel-free-libs-and-python-apt-repo.html
    - name: Install MKL
      run: |
        wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
        sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/usr

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -j2

    - name: Output test # @TODO some more complicated test, perhaps a unit test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: xvfb-run --auto-servernum ./translateLocally --version # Can't run normally due to not having X server set up

    - name: Package # Produce a .deb file using cpack
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        cpack
        ls deb/*.deb
        dpkg -I deb/*.deb
